name: Deep Research Auto-Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'live_data/**'
      - 'archive_data/**'
      - 'src/**'
      - 'lang.js'
      - 'translations/**'
      - '.eleventy.js'
      - 'package.json'
      - 'auto_market_analysis.js'
      - 'web_searcher.js'
      - 'market_data_collector.js'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: 'false'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify Deep Research data files
        run: |
          echo "🔍 Checking Deep Research data files..."
          echo "📍 Current working directory: $(pwd)"
          echo "📁 Repository contents:"
          ls -la
          echo ""
          
          echo "🔍 Checking live_data/latest.json..."
          if [ -f "live_data/latest.json" ]; then
            echo "✅ live_data/latest.json exists"
            echo "📊 File size: $(wc -c < live_data/latest.json) bytes"
            echo "📊 File modification: $(stat -c '%y' live_data/latest.json)"
            echo "📄 First 10 lines:"
            head -10 live_data/latest.json
            echo ""
            echo "📄 JSON structure check:"
            if jq empty live_data/latest.json 2>/dev/null; then
              echo "✅ Valid JSON format"
              echo "🔍 Top-level keys:"
              jq 'keys' live_data/latest.json 2>/dev/null || echo "❌ Failed to parse JSON keys"
            else
              echo "❌ Invalid JSON format"
            fi
          else
            echo "⚠️ live_data/latest.json not found"
            echo "📁 live_data directory contents:"
            ls -la live_data/ 2>/dev/null || echo "❌ live_data directory not found"
          fi
          echo ""
          
          echo "🔍 Checking _data/reportData.json..."
          if [ -f "_data/reportData.json" ]; then
            echo "✅ _data/reportData.json exists"
            echo "📊 File size: $(wc -c < _data/reportData.json) bytes"
            echo "📄 First 5 lines:"
            head -5 _data/reportData.json
          else
            echo "⚠️ _data/reportData.json not found"
            echo "📁 _data directory contents:"
            ls -la _data/ 2>/dev/null || echo "❌ _data directory not found"
          fi
          echo ""
          
          echo "🔍 Checking archive_data..."
          if [ -d "archive_data" ]; then
            echo "✅ archive_data directory exists"
            echo "📊 Files count: $(find archive_data -name '*.json' | wc -l)"
            echo "📁 Recent files:"
            ls -la archive_data/ | head -10
            echo "🔍 Checking manifest.json:"
            if [ -f "archive_data/manifest.json" ]; then
              echo "✅ manifest.json exists"
              jq '.entries | length' archive_data/manifest.json 2>/dev/null || echo "❌ Failed to parse manifest"
            else
              echo "⚠️ manifest.json not found"
            fi
          else
            echo "⚠️ archive_data directory not found"
          fi

      - name: Build with Eleventy
        run: |
          echo "🔨 Building site with Eleventy..."
          npm run build
          echo "✅ Build completed"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Verify build output
        run: |
          echo "🔍 Checking build output..."
          if [ -d "_site" ]; then
            echo "✅ _site directory exists"
            echo "📁 Contents:"
            find _site -name "*.html" -o -name "*.json" | head -10
          else
            echo "❌ _site directory not found"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: github-pages
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post-deployment notification
        if: success()
        run: |
          echo "🚀 Deep Research サイトのデプロイが完了しました"
          echo "🔗 URL: ${{ steps.deployment.outputs.page_url }}"